---
export interface Props {
  currentPage: number
  totalPages: number
}

const { currentPage, totalPages } = Astro.props

// Generate page numbers to show
function getPageNumbers(current: number, total: number): (number | string)[] {
  const pages: (number | string)[] = []

  // Always show first page
  pages.push(1)

  if (current > 4) {
    pages.push('...')
  }

  // Show pages around current page
  const start = Math.max(2, current - 1)
  const end = Math.min(total - 1, current + 1)

  for (let i = start; i <= end; i++) {
    if (i !== 1 && i !== total) {
      pages.push(i)
    }
  }

  if (current < total - 3) {
    pages.push('...')
  }

  // Always show last page (if more than 1 page)
  if (total > 1) {
    pages.push(total)
  }

  return pages
}

const pageNumbers = getPageNumbers(currentPage, totalPages)
---

<nav class="pagination" aria-label="Stars pagination">
  <div class="pagination-nav">
    <a
      href={`/stars/${currentPage - 1}/`}
      class="pagination-btn pagination-prev"
      data-hidden={currentPage <= 1 ? 'true' : 'false'}
    >
      ← Previous
    </a>

    <div class="pagination-pages">
      {
        pageNumbers.map((page) =>
          page === '...' ? (
            <span class="pagination-ellipsis">…</span>
          ) : (
            <a
              href={`/stars/${page}/`}
              class={`pagination-page ${page === currentPage ? 'current' : ''}`}
              aria-current={page === currentPage ? 'page' : undefined}
            >
              {page}
            </a>
          )
        )
      }
    </div>

    <a
      href={`/stars/${currentPage + 1}/`}
      class="pagination-btn pagination-next"
      data-hidden={currentPage >= totalPages ? 'true' : 'false'}
    >
      Next →
    </a>
  </div>
</nav>

<style>
  .pagination {
    margin-top: 3rem;
    padding-top: 1rem;
    padding-bottom: 1rem;
    border-top: 1px solid var(--color-lightGrey);
    border-bottom: 1px solid var(--color-lightGrey);
    margin-bottom: 2rem;
  }

  .pagination-nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .pagination-pages {
    display: flex;
    gap: 0.5rem;
    align-items: center;
  }

  .pagination-btn,
  .pagination-page {
    padding: 0.5rem 1rem;
    text-decoration: none;
    border-radius: 0.25rem;
    transition: all 0.2s ease;
    color: var(--text-primary);
    border: 1px solid var(--border-color);
  }

  .pagination-btn:hover,
  .pagination-page:hover {
    background-color: var(--bg-secondary);
    border-color: var(--accent-color);
  }

  .pagination-page.current {
    border-color: var(--accent-color);
    font-weight: 600;
    text-decoration: underline;
  }

  .pagination-ellipsis {
    padding: 0.5rem;
    color: var(--text-secondary);
  }

  .pagination-prev,
  .pagination-next {
    font-weight: 500;
  }

  .pagination-btn[data-hidden='true'] {
    visibility: hidden;
  }

  @media (max-width: 768px) {
    .pagination-nav {
      flex-direction: column;
      gap: 1.5rem;
    }

    .pagination-pages {
      order: -1;
    }

    .pagination-btn {
      padding: 0.75rem 1.5rem;
    }
  }
</style>
